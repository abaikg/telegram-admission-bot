// --- –¢–∏–ø—ã (–ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ types/AdmissionTypes.ts) ---

export interface HistoricalRow {
  year: number;
  tour: number;
  educationType: 'budget' | 'contract';
  region?: string;
  faculty: string;
  minScore: number;
  maxScore?: number;
}

export interface TourResult {
  tour: number;
  weightedMin: number;
  weightedMax?: number;
  userScore: number;
  chancePercentage: number;
  category: string;
  color: string;
}

// --- –ö–ª–∞—Å—Å ---

export class AdmissionCalculator {
  private weights = new Map<number, number>([
    [2024, 0.45],
    [2023, 0.35],
    [2022, 0.05],
    [2021, 0.15],
  ]);

  constructor(private data: HistoricalRow[]) {}

  public calculate(
    userScore: number,
    educationType: 'budget' | 'contract',
    region?: string
  ): TourResult[] {
    const results: TourResult[] = [];
    for (let tour = 1; tour <= 5; tour++) {
      const filtered = this.filterData(tour, educationType, region);
      if (!filtered.length) continue;
      const cleanData = this.removeAnomalies(filtered);
      const { weightedMin, weightedMax } = this.computeWeighted(cleanData);

      const chance = educationType === 'budget'
        ? this.computeBudgetChance(userScore, weightedMin)
        : this.computeContractChance(userScore, weightedMin, weightedMax);

      results.push({
        tour,
        weightedMin,
        weightedMax,
        userScore,
        ...chance,
      });
    }
    return results;
  }

  private filterData(tour: number, educationType: string, region?: string) {
    return this.data.filter(r =>
      r.tour === tour &&
      r.educationType === educationType &&
      (!region || r.region === region)
    );
  }

  private removeAnomalies(data: HistoricalRow[]) {
    const hasOtherYears = data.some(d => d.year !== 2022);
    return data.filter(d =>
      (!hasOtherYears || d.year !== 2022) &&
      d.minScore <= (d.maxScore ?? d.minScore)
    );
  }

  private computeWeighted(data: HistoricalRow[]) {
    let sumWeight = 0, sumMin = 0, sumMax = 0;
    for (const d of data) {
      const w = this.weights.get(d.year) || 0.1;
      sumWeight += w;
      sumMin += d.minScore * w;
      sumMax += (d.maxScore ?? d.minScore) * w;
    }
    return { weightedMin: sumMin / sumWeight, weightedMax: sumMax / sumWeight };
  }

  private computeBudgetChance(score: number, min: number) {
    if (score >= min + 25) return this.pack(77.5, "–í—ã—Å–æ–∫–∏–µ", "üü¢");
    if (score >= min + 15) return this.pack(62.5, "–•–æ—Ä–æ—à–∏–µ", "üü¢");
    if (score >= min + 5) return this.pack(45, "–°—Ä–µ–¥–Ω–∏–µ", "üü°");
    if (score >= min) return this.pack(25, "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", "üü°");
    if (score >= min - 20) return this.pack(10, "–ù–∏–∑–∫–∏–µ", "üî¥");
    return this.pack(2.5, "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ", "üî¥");
  }

  private computeContractChance(score: number, min: number, max?: number) {
    const mid = (min + (max ?? min)) / 2;
    const upper = mid + ((max ?? mid) - mid) / 2;
    if (score >= (max ?? mid) + 15) return this.pack(92.5, "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ", "üü¢");
    if (score >= (max ?? mid)) return this.pack(85, "–í—ã—Å–æ–∫–∏–µ", "üü¢");
    if (score >= upper) return this.pack(72.5, "–•–æ—Ä–æ—à–∏–µ", "üü¢");
    if (score >= mid) return this.pack(55, "–°—Ä–µ–¥–Ω–∏–µ", "üü°");
    if (score >= min + 15) return this.pack(35, "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", "üü°");
    if (score >= min) return this.pack(17.5, "–ù–∏–∑–∫–∏–µ", "üî¥");
    return this.pack(5, "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ", "üî¥");
  }

  private pack(p: number, cat: string, color: string) {
    return { chancePercentage: p, category: cat, color };
  }
}

// --- –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ ---

/**
 * calculateAdmissionChance - –±—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –æ–¥–Ω–æ–º—É —Ç—É—Ä—É
 * @param args –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—É—Ä–∞
 * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–∞ (TourResult)
 */
export function calculateAdmissionChance(args: {
  faculty: string;
  educationType: 'budget' | 'contract';
  region?: string;
  userScore: number;
  tour: number;
}): TourResult {
  const { faculty, educationType, region, userScore, tour } = args;
  const historicalData = getHistoricalData(faculty, educationType, region);
  const calc = new AdmissionCalculator(historicalData);
  const allResults = calc.calculate(userScore, educationType, region);
  const result = allResults.find(r => r.tour === tour);

  if (!result) throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—É—Ä—É ${tour}`);
  return result;
}

// --- –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –ë–î, —Ñ–∞–π–ª–∞ –∏–ª–∏ API

function getHistoricalData(
  faculty: string,
  educationType: 'budget' | 'contract',
  region?: string
): HistoricalRow[] {
  // –ü—Ä–∏–º–µ—Ä. –ü–æ–¥–∫–ª—é—á–∏ —Å–≤–æ—é —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö!
  const example: HistoricalRow[] = [
    // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    {
      year: 2024, tour: 1, educationType: 'budget', region: '–≥.–ë–∏—à–∫–µ–∫',
      faculty: '–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ', minScore: 225, maxScore: 265,
    },
    // ...–ø–æ–¥–≥—Ä—É–∑–∏ —Å—é–¥–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  ];
  // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Äî –¥–æ–ø–æ–ª–Ω–∏ –∫–∞–∫ –Ω–∞–¥–æ!
  return example.filter(row =>
    row.faculty === faculty &&
    row.educationType === educationType &&
    (educationType === 'budget'
      ? (!region || row.region === region)
      : true)
  );
}
