import { Scenes, Markup } from 'telegraf';
import { prisma } from '../../../db';
import type { BotContext } from '../../../types/BotContext';
import { calculateAdmissionChance } from '../../../utils/admissionCalculator';

const BUDGET_FACULTIES = [
  '–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ',
  '–ü–µ–¥–∏–∞—Ç—Ä–∏—è',
  '–ú–ü–î',
  '–í–°–û',
];
const CONTRACT_FACULTIES = [
  '–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ',
  '–ü–µ–¥–∏–∞—Ç—Ä–∏—è',
  '–ú–ü–î',
  '–í–°–û',
  '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
  '–§–∞—Ä–º–∞—Ü–∏—è',
];

export const calculateScene = new Scenes.WizardScene<BotContext>(
  'calculate-wizard',
  async ctx => {
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:',
      Markup.keyboard([['–ë—é–¥–∂–µ—Ç', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç']]).oneTime().resize()
    );
    return ctx.wizard.next();
  },

  async ctx => {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–æ–π.');
      return;
    }
    const text = ctx.message.text.toLowerCase();
    if (text !== '–±—é–¥–∂–µ—Ç' && text !== '–∫–æ–Ω—Ç—Ä–∞–∫—Ç') {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–æ–π.');
      return;
    }
    ctx.session.educationType = text === '–±—é–¥–∂–µ—Ç' ? 'budget' : 'contract';
    const faculties =
      ctx.session.educationType === 'budget'
        ? BUDGET_FACULTIES
        : CONTRACT_FACULTIES;
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:',
      Markup.keyboard(faculties.map(f => [f])).oneTime().resize()
    );
    return ctx.wizard.next();
  },

  async ctx => {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∫–Ω–æ–ø–∫–æ–π.');
      return;
    }
    const faculty = ctx.message.text;
    const allowed =
      ctx.session.educationType === 'budget'
        ? BUDGET_FACULTIES
        : CONTRACT_FACULTIES;
    if (!allowed.includes(faculty)) {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∫–Ω–æ–ø–∫–æ–π.');
      return;
    }
    ctx.session.faculty = faculty;
    await ctx.reply(
      '–ù–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.',
      Markup.keyboard([['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å']]).oneTime().resize()
    );
    return ctx.wizard.next();
  },

  async ctx => {
    if (!ctx.message || !('text' in ctx.message) || ctx.message.text !== '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å') {
      await ctx.reply('–ù–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
      return;
    }
    if (!ctx.from) {
      await ctx.reply('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return ctx.scene.leave();
    }
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(ctx.from.id) },
    });
    if (!user) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return ctx.scene.leave();
    }

    const totalScore =
      (user.mainScore ?? 0) + (user.chemistryScore ?? 0) + (user.biologyScore ?? 0);

    const result = calculateAdmissionChance({
      faculty: ctx.session.faculty!,
      educationType: ctx.session.educationType!,
      region: user.region ?? undefined,
      userScore: totalScore,
      tour: 1,
    });

    await prisma.calculation.create({
      data: {
        userId: user.id,
        educationType: ctx.session.educationType!,
        faculty: ctx.session.faculty!,
        mainScore: user.mainScore ?? 0,
        chemistryScore: user.chemistryScore ?? 0,
        biologyScore: user.biologyScore ?? 0,
        probability: result.chancePercentage,
        region: user.region ?? undefined,
      },
    });

    await ctx.reply(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
        `–§–∞–∫—É–ª—å—Ç–µ—Ç: ${ctx.session.faculty}\n` +
        `–§–æ—Ä–º–∞—Ç: ${ctx.session.educationType === 'budget' ? '–±—é–¥–∂–µ—Ç' : '–∫–æ–Ω—Ç—Ä–∞–∫—Ç'}\n` +
        `–°—É–º–º–∞ –±–∞–ª–ª–æ–≤: ${totalScore}\n` +
        `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (1-–π —Ç—É—Ä): ${result.chancePercentage}%`
    );

    return ctx.scene.leave();
  }
);
